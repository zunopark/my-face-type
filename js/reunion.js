let reunionImages = {
  self: null,
  partner: null,
};

let selectedRelation2 = null;
let selectedFeeling2 = null;

// 1) Îëê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏôÑÎ£å Ïãú ‚Üí Î∞îÌÖÄÏãúÌä∏ Ïó¥Í∏∞
function checkBothUploaded() {
  if (reunionImages.self && reunionImages.partner) {
    document.getElementById("relationshipSheet").classList.add("active");
  }
}

// 2) Í¥ÄÍ≥Ñ ÏÑ†ÌÉù
document.querySelectorAll(".relationship-options div").forEach((el) =>
  el.addEventListener("click", () => {
    selectedRelation2 = el.dataset.type;

    // ÏÑ†ÌÉù Ìö®Í≥º
    document
      .querySelectorAll(".relationship-options div")
      .forEach((item) => item.classList.remove("selected"));
    el.classList.add("selected");

    // ÌõÑÏÜç Í∞êÏ†ï Î™©Î°ù
    const followups = {
      Ïó∞Ïï†: [
        "üíì ÏÜêÎßå Ïû°ÏïÑÎèÑ ÏÑ∏ÏÉÅÏù¥ ÌôòÌï¥Ï†∏Ïöî",
        "üíé Îçî ÍπäÏùÄ Í¥ÄÍ≥ÑÎ°ú ÎÇòÏïÑÍ∞ÄÍ≥† Ïã∂Ïñ¥Ïöî",
        "üòÆ‚Äçüí® ÏßÄÏ≥êÏöî... Ïù¥Î≥ÑÏùÑ Í≥†ÎØº Ï§ëÏù¥ÏóêÏöî",
      ],
      ÏßùÏÇ¨Îûë: [
        "üëª ÏÉÅÎåÄÎäî ÎÇ¥ Ï°¥Ïû¨Î•º ÏïåÍπåÏöî...? (Ìà¨Î™ÖÏù∏Í∞Ñ ÌÉàÏ∂ú Ìù¨Îßù!)",
        "‚è≥ Í≥†Î∞± ÌÉÄÏù¥Î∞çÏùÑ Ï°∞Ïã¨Ïä§Î†à ÏÇ¥ÌîºÍ≥† ÏûàÏñ¥Ïöî",
        "üíî Ìè¨Í∏∞Ìï¥Ïïº Ìï†ÍπåÏöî... ÎÑàÎ¨¥ ÌûòÎì§Ïñ¥Ïöî",
      ],
      Ïç∏: [
        "üß† ÏÉÅÎåÄÏùò ÏÜçÎßàÏùåÏù¥ ÎÑàÎ¨¥ Í∂ÅÍ∏àÌï¥Ïöî!",
        "üî• Ïç∏Ïù¥ ÎÑàÎ¨¥ ÎäêÎ†§Ïöî... Ïù¥Ï†† ÌôïÏã†Ïù¥ ÌïÑÏöîÌï¥Ïöî!",
        "üéØ Ïñ∏Ï†ú Í≥†Î∞±ÌïòÎ©¥ Ï¢ãÏùÑÍπåÏöî? ÌÉÄÏù¥Î∞çÏùÑ Ïû°Í≥† ÏûàÏñ¥Ïöî",
      ],
      Í≤∞Ìòº: [
        "üíç ÍøÄ Îñ®Ïñ¥ÏßÄÎäî Í≤∞Ìòº ÏÉùÌôú Ï§ëÏù¥ÏóêÏöî!",
        "üí¨ Î≥ÄÌôîÍ∞Ä ÌïÑÏöîÌïú ÏãúÏ†êÏù∏ Í≤É Í∞ôÏïÑÏöî",
        "üòî Ïù¥ÌòºÍπåÏßÄ Í≥†ÎØºÌï† Ï†ïÎèÑÎ°ú ÎßàÏùåÏù¥ Î¨¥Í±∞ÏõåÏöî...",
      ],
      Í¥ÄÏã¨: [
        "ü§î ÏÉÅÎåÄÎèÑ ÎÇ† ÏÉùÍ∞ÅÌïòÍ≥† ÏûàÏùÑÍπåÏöî?",
        "ü§ó ÏÇ¥Ïßù Îçî Îã§Í∞ÄÍ∞Ä Î≥¥Í≥† Ïã∂Ïñ¥Ïöî",
        "üíò ÎààÎßå ÎßàÏ£ºÏ≥êÎèÑ Ïã¨Ïû•Ïù¥ ÎëêÍ∑ºÎëêÍ∑ºÌï¥Ïöî!",
      ],
    };

    const options = followups[selectedRelation2] || ["‚ù§Ô∏è ÎßàÏùåÏù¥ Î≥µÏû°Ìï¥Ïöî"];
    const followupEl = document.getElementById("followupOptions");
    followupEl.innerHTML = options.map((f) => `<div>${f}</div>`).join("");
    document.getElementById("followupSheet").classList.remove("hidden");
    document.getElementById("startAnalyzeBtn").classList.add("hidden");

    document.querySelectorAll("#followupOptions div").forEach((div) =>
      div.addEventListener("click", () => {
        selectedFeeling2 = div.textContent;
        document
          .querySelectorAll("#followupOptions div")
          .forEach((el) => el.classList.remove("selected"));
        div.classList.add("selected");
        document.getElementById("startAnalyzeBtn").classList.remove("hidden");
      })
    );
  })
);

// 3) Î∂ÑÏÑù ÏãúÏûë Î≤ÑÌäº ÌÅ¥Î¶≠
document.getElementById("startAnalyzeBtn").addEventListener("click", () => {
  document.getElementById("relationshipSheet").classList.remove("active");
  document.getElementById("analyzeOverlay").classList.add("active");

  analyzeReunionFeatures(
    reunionImages.self,
    reunionImages.partner,
    selectedRelation,
    selectedFeeling
  );
});

// Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ Î∞è Base64 Ï†ÄÏû•
function readReunionURL(input, type) {
  const previewId =
    type === "reunionSelf" ? "reunion-preview-self" : "reunion-preview-partner";

  if (input.files && input.files[0]) {
    const reader = new FileReader();
    reader.onload = function (e) {
      const preview = document.getElementById(previewId);
      preview.innerHTML = `<img src="${e.target.result}" class="reunion-preview-image" alt="ÏÇ¨ÏßÑ ÎØ∏Î¶¨Î≥¥Í∏∞"/>`;

      reunionImages[type === "reunionSelf" ? "self" : "partner"] =
        e.target.result;

      // ‚úÖ Îëê Ïû• Îã§ ÏóÖÎ°úÎìú ÏôÑÎ£å Ïãú Î≤ÑÌäº ÌôúÏÑ±Ìôî
      if (reunionImages.self && reunionImages.partner) {
        document.getElementById("openReunionStart").disabled = false;
      }
    };
    reader.readAsDataURL(input.files[0]);
  }
}

document.getElementById("openReunionStart").addEventListener("click", () => {
  document.getElementById("relationshipSheet").classList.add("active");
  document.querySelector(".bottom-analyze-overlay").classList.add("active");
});

// Base64 ‚Üí File Î≥ÄÌôò
function dataURLtoFile2(dataUrl, filename) {
  const arr = dataUrl.split(",");
  const mime = arr[0].match(/:(.*?);/)[1];
  const bstr = atob(arr[1]);
  let n = bstr.length;
  const u8arr = new Uint8Array(n);
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new File([u8arr], filename, { type: mime });
}

// IndexedDB Ï†ÄÏû•
function saveReunionFeaturesToDB(data) {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("reunionAnalysisDB", 1);

    request.onupgradeneeded = function (event) {
      const db = event.target.result;
      if (!db.objectStoreNames.contains("results")) {
        db.createObjectStore("results", { keyPath: "id" }); // ‚ùå autoIncrement Ï†úÍ±∞!
      }
    };

    request.onsuccess = function (event) {
      const db = event.target.result;
      const tx = db.transaction(["results"], "readwrite");
      const store = tx.objectStore("results");
      const putRequest = store.put(data); // ‚úÖ put ÏÇ¨Ïö©

      putRequest.onsuccess = function () {
        resolve(data.id); // ‚úÖ ÎÇ¥Í∞Ä ÎÑ£ÏùÄ UUID Í∑∏ÎåÄÎ°ú Î∞òÌôò
      };

      putRequest.onerror = function () {
        reject(putRequest.error);
      };
    };

    request.onerror = function () {
      reject(request.error);
    };
  });
}

async function analyzeReunionFeatures(
  image1Base64,
  image2Base64,
  relationshipType,
  relationshipFeeling
) {
  const file1 = dataURLtoFile2(image1Base64, "self.jpg");
  const file2 = dataURLtoFile2(image2Base64, "partner.jpg");

  const formData = new FormData();
  formData.append("file1", file1);
  formData.append("file2", file2);

  try {
    const response = await fetch(
      "https://port-0-momzzi-fastapi-m7ynssht4601229b.sel4.cloudtype.app/analyze/pair/features/",
      { method: "POST", body: formData }
    );

    const result = await response.json();
    if (result.error) return;

    const savedId = await saveReunionFeaturesToDB({
      id: crypto.randomUUID(),
      features1: result.features1,
      features2: result.features2,
      image1Base64,
      image2Base64,
      relationshipType, // ‚úÖ Ï†ÄÏû•
      relationshipFeeling, // ‚úÖ Ï†ÄÏû•
      createdAt: new Date().toISOString(),
    });
    document.getElementById("analyzeOverlay").classList.remove("active");
    window.location.href = `/reunion-report/?id=${savedId}`;
  } catch (error) {
    document.getElementById("analyzeOverlay").classList.remove("active");
    console.error("Î∂ÑÏÑù Ïã§Ìå®:", error);
  }
}

document.addEventListener("DOMContentLoaded", () => {
  const overlay = document.querySelector(".bottom-analyze-overlay");
  if (overlay) {
    overlay.addEventListener("click", () => {
      document.getElementById("relationshipSheet").classList.remove("active");
      overlay.classList.remove("active");
    });
  }
});
